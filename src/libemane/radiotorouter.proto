/*
 * Copyright (c) 2013-2014 - Adjacent Link LLC, Bridgewater, New Jersey
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * * Redistributions of source code must retain the above copyright
 *   notice, this list of conditions and the following disclaimer.
 * * Redistributions in binary form must reproduce the above copyright
 *   notice, this list of conditions and the following disclaimer in
 *   the documentation and/or other materials provided with the
 *   distribution.
 * * Neither the name of Adjacent Link LLC nor the names of its
 *   contributors may be used to endorse or promote products derived
 *   from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

syntax = "proto2";

package EMANEMessage;

option optimize_for = SPEED;

message RadioToRouterNeighborMetrics
{
  message NeighborMetric
  {
    required uint32 neighborId = 1;           // neighbor id
    required uint64 numRxFrames = 2;          // number of received frames
    required uint64 numTxFrames = 3;          // number of received frames
    required uint64 numMissedFrames =4 ;      // number of missed frames
    required double bandwidthConsumption = 5; // bandwidth consumption sec
    required float  sinrAverage = 6;          // avg sinr
    required float  sinrStddev = 7;           // std dev sinr
    required float  noiseFloorAvg = 8;        // avg noise floor
    required float  noiseFloorStddev = 9;     // std dev noise floor
    required uint64 rxAvgDataRatebps = 10;    // avg rx data rate in bps
    required uint64 txAvgDataRatebps = 11;    // avg tx data rate in bps
  };

  repeated NeighborMetric metrics = 1;
}

message RadioToRouterQueueMetrics
{
  message QueueMetric
  {
    required uint32 queueId = 1;          // queue id
    required uint32 maxSize = 2;          // queue mx size
    required uint32 currentDepth = 3;     // queue current depth
    required uint32 numDiscards = 4;      // queue num discards
    required double avgDelay = 5;         // queue avg delay in seconds
  }

  repeated QueueMetric metrics = 1;
}

message RadioToRouterSelfMetric
{
  required uint64 broadcastDataRatebps = 1; // broadcast data rate
  required uint64 maxDataRatebps = 2;       // max data rate
  required double reportInterval = 3;       // report interval sec
}
